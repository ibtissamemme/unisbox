; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{19FF1FB4-D772-4604-B95C-86AA5BC3B29F}
AppName=OMNIGARDE - UnisBox
AppVersion=1.1.0.0
;AppVerName=OMNIGARDE - UnisBox 1.1.0.0
AppPublisher=Safeware
AppPublisherURL=http://www.safeware.fr/
AppSupportURL=http://www.safeware.fr/
;AppUpdatesURL=http://www.safeware.fr/
DefaultDirName={pf}\Safeware\OMNIGARDE - UnisBox
DisableDirPage=yes
DefaultGroupName=OMNIGARDE - UnisBox
DisableProgramGroupPage=yes
OutputBaseFilename=setupOMNIGARDEUnisBox
SetupIconFile=D:\ZwDev\SandBox\SandBox\bin\Release\Resources\omnigarde.ico
Compression=lzma
SolidCompression=yes
AppCopyright=Copyright © 2015 Safeware.


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
;Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Tasks]
;Name: "DotNetFramework"; Description: ".NET Framework 2.0"; GroupDescription: "If .NET is NOT installed:";

[Files]
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\OMNIGARDE - UnisBox.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\*"; DestDir: "{app}"; Excludes: "\log\*, OMNIGARDE - UnisBox.application, OMNIGARDE - UnisBox.exe.manifest, user.config.lnk"; Flags: ignoreversion
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\Biovein\*"; DestDir: "{app}\Resources\Biovein"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\EasyRonde\*"; DestDir: "{app}\Resources\EasyRonde"; Flags: ignoreversion recursesubdirs createallsubdirs
;Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\IrisCard\*"; DestDir: "{app}\Resources\IrisCard"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\MIL100\*"; DestDir: "{app}\Resources\MIL100"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\Tracing\*"; DestDir: "{app}\Resources\Tracing"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\ZalixVeinSecure\*"; DestDir: "{app}\Resources\ZalixVeinSecure"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\ZwDev\SandBox\SandBox\bin\Release\Resources\*"; DestDir: "{app}\Resources\"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{commonprograms}\Safeware\OMNIGARDE\OMNIGARDE - UnisBox"; Filename: "{app}\OMNIGARDE - UnisBox.exe"
Name: "{commonprograms}\Safeware\OMNIGARDE\Log"; Filename: "{app}\log"
Name: "{commonprograms}\Safeware\OMNIGARDE\app.config"; Filename: "{app}\OMNIGARDE - UnisBox.exe.config"
Name: "{commonprograms}\Safeware\OMNIGARDE\user.config"; Filename: "{app}"
Name: "{commonprograms}\Safeware\OMNIGARDE\{cm:UninstallProgram,OMNIGARDE - UnisBox}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\OMNIGARDE - UnisBox"; Filename: "{app}\OMNIGARDE - UnisBox.exe"

[Run]
;Filename: "{app}\OMNIGARDE - UnisBox.exe"; Parameters: "{param:url} ""OMNIGARDE"""; Description: "{cm:LaunchProgram,OMNIGARDE - UnisBox}"; Flags: postinstall ;


[Code]
var
lblURL: TLabel;
txtURL: TEdit; 

// Run OMNIGARDE after install
function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
begin
  Result := True;
  if CurPageID = wpFinished then
  begin
    //MsgBox(ExpandConstant('{param:url}'), mbInformation, MB_OK);
    ExecAsOriginalUser(ExpandConstant('{app}\OMNIGARDE - UnisBox.exe'), txtURL.Text+ ' OMNIGARDE', '', SW_SHOWNORMAL, ewNoWait, ResultCode);
  end;
end;

// Framework
function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key: string;
    install, release, serviceCount: cardinal;
    check45, success: boolean;
begin
    // .NET 4.5 installs as update to .NET 4.0 Full
    if version = 'v4.5' then begin
        version := 'v4\Full';
        check45 := true;
    end else
        check45 := false;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0/4.5 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 uses additional value Release
    if check45 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= 378389);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;


function InitializeSetup(): Boolean;
begin
    if not IsDotNetDetected('v2.0.50727', 0) then begin
        MsgBox('MyApp requires Microsoft .NET Framework 2.0.'#13#13
            'Please use Windows Update to install this version,'#13
            'and then re-run the setup program.', mbInformation, MB_OK);
        result := false;
    end else
        result := true;

end;


procedure frmDomainReg_Activate(Page: TWizardPage);
begin
end;

function frmDomainReg_ShouldSkipPage(Page: TWizardPage): Boolean;
begin
Result := False;
end;

function frmDomainReg_BackButtonClick(Page: TWizardPage): Boolean;
begin
Result := True;
end;

function frmDomainReg_NextButtonClick(Page: TWizardPage): Boolean;
begin
Result := True;
end;

procedure frmDomainReg_CancelButtonClick(Page: TWizardPage; var Cancel, Confirm: Boolean);
begin
end;

function frmDomainReg_CreatePage(PreviousPageId: Integer): Integer;
var
Page: TWizardPage;
begin
Page := CreateCustomPage(
PreviousPageId,
'URL Registration',
'Check or entrer URL TELEMAQUE'
);

{ lblURL }
lblURL := TLabel.Create(Page);
with lblURL do
begin
Parent := Page.Surface;
Left := ScaleX(0);
Top := ScaleY(25);
Width := ScaleX(35);
Height := ScaleY(13);
Caption := 'URL';
end;

{ txtURL }
txtURL := TEdit.Create(Page);
with txtURL do
begin
Parent := Page.Surface;
Left := ScaleX(50);
Top := ScaleY(23);
Width := ScaleX(350);
Height := ScaleY(21);
TabOrder := 0;
Text := ExpandConstant('{param:url}');
end;

with Page do
begin
OnActivate := @frmDomainReg_Activate;
OnShouldSkipPage := @frmDomainReg_ShouldSkipPage;
OnBackButtonClick := @frmDomainReg_BackButtonClick;
OnNextButtonClick := @frmDomainReg_NextButtonClick;
OnCancelButtonClick := @frmDomainReg_CancelButtonClick;
end;

Result := Page.ID;
end;

procedure InitializeWizard();
begin
{this page will come after welcome page}

  frmDomainReg_CreatePage(wpWelcome);
end;

